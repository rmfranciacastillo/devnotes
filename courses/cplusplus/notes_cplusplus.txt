Notes: C++
============

2's complement:
---------------

Adding numbers uses 2's complement it's a great way to add numbers without

overflowing.

for example:

1 - 3 = -2

// in 2's complement(1-> Invert all, 2-> Add one) 00000011 -> 11111100 -> 11111101
---------

00000001
11111101
---------
11111110  // 2's complement of -2
Note: With 2's complement you can throw away the sign bit and won't have two zeroes.

  (10000000 and 00000000) <- This would be a nightmare

Enum:
------

Datatypes with a limited set of data

  enum class Day {Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday};
  Day today {Day::Tuesday};


Arrays:
--------

You can use the old declaration

  int x[10];

  or

  int[10] x {}; // Fills an empty array

Can also include an array library

  #include <array>

  std::array<datatype, Number> stuff {};

  stuff.fill(3.1416);                   // Fills array with PI values.


// Note: Arrays as parameters are passed by reference
//			 Also, functions cannot return an Array

	void initialize(const int list[], int listSize) { ... }



File Input/Output
------------------

5 steps requirement:
********************

a) Include header: <fstream>
b) Define fstream variables
c) Associate fstream variables with the I/O sources. (fin.open('sth.txt'))
d) Use the filestream variable with >>, <<
e) Close the files


// Check if file exist
ifstream fin;

fin.open('data.txt');

if(!fin) {
	cout << "File does not exists"
	return 1;
}


Enum Types
-----------

	C++ custom datatypes with custom values.

	enum typenName {value1, value2, ....}

  ex: enum colors {BROWN, BLUE, RED, GREEN, YELLOW};

	ex2:
		enum mathStudent {JOHN, BILL, CINDY, LISA, RON};
		enum compStudent {SUSAN, CATHY, JOHN, WILLIAM}; // illegal bc JOHN was used in one enum


	ex3: Looping

		enum sports {BASKETBALL, FOOTBALL, HOCKEY, BASEBALL, SOCCER, VOLLEYBALL};

		for (mySport = BASKETBALL; mySport <= SOCCER; mySport = static_cast<sports>(mySport + 1)) { ... }

	ex4: Switch cases

		enum courses { ALGEBRA, CS, LITERATURE }

		switch(course) {
			case ALGEBRA: ...;
			case CS: ...;
			case LITERATURE: ...;
		}

	ex5: Variable declaration

	enum coins {PENNY, NICKEL, DIME, HALFDOLLAR, DOLLAR} change, usCoins;


OOP concepts
--------------

contructor
**********
a) No return type
b) Same name as the class
c) Should be public

I) Encapsulation

	- Avoid others to manipulate the data
	- Using getters and setters

II) Abstraction

	- Abstract classes

	ex:
	class AbstractEmployee {
		virtual void askForPromotion()=0; 	// Must use this virtual function
	}

	class Employee: AbstractEmployee {
		private: ...
		public:
				...
				void askForPromotion() { ... }
	}


III) Inheritance

	class Developer: Employee { ... }

	class Teacher: Employee {
		Teacher(int age): Employee(int age) { ... }
	}

IV) Polymorphism

	class Employee {
		...
		virtual void Work() { ... }
		...
	}

	Developer d = Developer("...");
	Teacher t = Teacher(...)

	Employee* e1 = &d;
	Employee* e2 = &t;

	e1->Work();
	e2->Work();










